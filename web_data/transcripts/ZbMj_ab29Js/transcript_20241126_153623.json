{
  "video_id": "ZbMj_ab29Js",
  "url": "https://www.youtube.com/watch?v=ZbMj_ab29Js",
  "transcript": [
    {
      "text": "All right.",
      "start": 9.46,
      "duration": 0.88
    },
    {
      "text": "Hi there everyone",
      "start": 10.34,
      "duration": 1.78
    },
    {
      "text": "I'm Alaina.",
      "start": 12.2,
      "duration": 1.12
    },
    {
      "text": "And this lovely pre dinner slot I will be\ntelling you the linguistic back story of the",
      "start": 13.32,
      "duration": 3.95
    },
    {
      "text": "regular expression.",
      "start": 17.27,
      "duration": 2.23
    },
    {
      "text": "So, regular expressions look a little intimidating.",
      "start": 19.5,
      "duration": 4.519
    },
    {
      "text": "I mean, imagine being someone who is new to\nprogramming.",
      "start": 24.019,
      "duration": 2.27
    },
    {
      "text": "Say programming and JavaScript and seeing\nsomething that looks like this.",
      "start": 26.289,
      "duration": 4.041
    },
    {
      "text": "When I started coding, I was pretty freaked\nout by regular expressions.",
      "start": 30.33,
      "duration": 4.58
    },
    {
      "text": "I just didn't get them.",
      "start": 34.91,
      "duration": 1.62
    },
    {
      "text": "If I were a Shiba Inu, I would look like this.",
      "start": 36.53,
      "duration": 4.18
    },
    {
      "text": "Some of you might relate to that sentiment.",
      "start": 40.71,
      "duration": 3.06
    },
    {
      "text": "Some of you might wonder how you can get better\nat writing regular expressions.",
      "start": 43.77,
      "duration": 5.949
    },
    {
      "text": "The usual answer is something like StackOverflow.",
      "start": 49.719,
      "duration": 3.32
    },
    {
      "text": "But people tend to use StackOverflow to copy\nand paste code when they're in a pinch rather",
      "start": 53.039,
      "duration": 5.95
    },
    {
      "text": "than to learn the proper way to actually write\nregular expressions.",
      "start": 58.989,
      "duration": 4.811
    },
    {
      "text": "To truly understand regular expressions, I\npropose an unorthodox route.",
      "start": 63.8,
      "duration": 9.41
    },
    {
      "text": "Do it right now.",
      "start": 73.21,
      "duration": 1.0
    },
    {
      "text": "No, I mean, I'm being a bit facetious and,\nyou know, this is a big thing, learning linguistics.",
      "start": 74.21,
      "duration": 7.01
    },
    {
      "text": "What I really mean to say is, learn how regular\nexpressions work in the field of linguistics",
      "start": 81.22,
      "duration": 6.87
    },
    {
      "text": "before trying to use them in JavaScript.",
      "start": 88.09,
      "duration": 3.68
    },
    {
      "text": "This is what I'll be walking you through today.",
      "start": 91.77,
      "duration": 4.61
    },
    {
      "text": "Let me take you on a journey that begins with\nNoam Chomsky pictured here and defends a cheer.",
      "start": 96.38,
      "duration": 6.65
    },
    {
      "text": "Cool.",
      "start": 103.03,
      "duration": 2.05
    },
    {
      "text": "Chomsky fans in the audience.",
      "start": 105.08,
      "duration": 1.719
    },
    {
      "text": "Me too.",
      "start": 106.799,
      "duration": 2.0
    },
    {
      "text": "And in journey.",
      "start": 108.799,
      "duration": 1.07
    },
    {
      "text": "We'll start with Chomsky and we'll end with\nthe regular expression.",
      "start": 109.869,
      "duration": 4.581
    },
    {
      "text": "So, as some of you may know, Chomsky is not\na computer scientist by profession.",
      "start": 114.45,
      "duration": 5.84
    },
    {
      "text": "He is a linguistics, a philosopher, a political\nactivist and ton of other things.",
      "start": 120.29,
      "duration": 7.9
    },
    {
      "text": "But his contributions to computer science\nwere pretty accidental.",
      "start": 128.19,
      "duration": 5.67
    },
    {
      "text": "His major contribution to the field of computer\nscience is something known as the Chomsky",
      "start": 133.86,
      "duration": 4.8
    },
    {
      "text": "hierarchy.",
      "start": 138.66,
      "duration": 1.75
    },
    {
      "text": "The Chomsky hierarchy is an ordering of grammars.",
      "start": 140.41,
      "duration": 4.23
    },
    {
      "text": "But since most of us in the room are not linguists,\nwe have to cover what a grammar is before",
      "start": 144.64,
      "duration": 5.25
    },
    {
      "text": "we can go further.",
      "start": 149.89,
      "duration": 3.13
    },
    {
      "text": "First thing, a linguistic crash course so\nthat we can understand Chomsky's hierarchy.",
      "start": 153.02,
      "duration": 6.78
    },
    {
      "text": "So, grammars.",
      "start": 159.8,
      "duration": 3.69
    },
    {
      "text": "Grammars provide the rules that build languages.",
      "start": 163.49,
      "duration": 4.62
    },
    {
      "text": "Some of you might also wonder, what's a language?",
      "start": 168.11,
      "duration": 2.92
    },
    {
      "text": "Well, a language comprises of symbols and\nthe rules to apply to those symbols.",
      "start": 171.03,
      "duration": 7.31
    },
    {
      "text": "In other words, languages comprise of symbols\nand a grammar.",
      "start": 178.34,
      "duration": 5.86
    },
    {
      "text": "These symbols can be combined to make strings.",
      "start": 184.2,
      "duration": 3.92
    },
    {
      "text": "The grammar provides us with a set of operations\nthat can be used on these strings of symbols.",
      "start": 188.12,
      "duration": 8.69
    },
    {
      "text": "To be a bit more specific, grammars provide\na framework with which input or intermedial",
      "start": 196.81,
      "duration": 5.67
    },
    {
      "text": "strings of symbols can be converted into some\noutput string of symbols.",
      "start": 202.48,
      "duration": 6.03
    },
    {
      "text": "Throughout this presentation, I might refer\nto input and intermediate strings as non terminals",
      "start": 208.51,
      "duration": 6.3
    },
    {
      "text": "and output strings at terminals.",
      "start": 214.81,
      "duration": 2.32
    },
    {
      "text": "I'm just tell you this now so that if you\nhear these different terms, you'll know that",
      "start": 217.13,
      "duration": 4.24
    },
    {
      "text": "they mean the same thing.",
      "start": 221.37,
      "duration": 2.64
    },
    {
      "text": "So, I want to make these terms feel a bit\nmore tangible because obviously learning linguistics",
      "start": 224.01,
      "duration": 6.97
    },
    {
      "text": "in two minutes is not a thing that anyone\ncan do.",
      "start": 230.98,
      "duration": 2.74
    },
    {
      "text": "So, I'm going to provide an example using\na made-up language from the world of Harry",
      "start": 233.72,
      "duration": 5.33
    },
    {
      "text": "Potter known as Parseltongue.",
      "start": 239.05,
      "duration": 2.88
    },
    {
      "text": "So, in Parseltongue, there are three terminal\nsymbols and three non terminal symbols.",
      "start": 241.93,
      "duration": 8.16
    },
    {
      "text": "They're right here.",
      "start": 250.09,
      "duration": 4.41
    },
    {
      "text": "In Parseltongue, there's also a set of rules\nfor converting non terminal symbols into terminal",
      "start": 254.5,
      "duration": 7.85
    },
    {
      "text": "symbols.",
      "start": 262.35,
      "duration": 3.67
    },
    {
      "text": "So, now let's go through an example of converting\na non terminal string into a terminal string.",
      "start": 266.02,
      "duration": 9.96
    },
    {
      "text": "So, here is our starting string.",
      "start": 275.98,
      "duration": 2.61
    },
    {
      "text": "It is a non terminal.",
      "start": 278.59,
      "duration": 1.29
    },
    {
      "text": "Oops.",
      "start": 279.88,
      "duration": 1.0
    },
    {
      "text": "I'm sorry.",
      "start": 280.88,
      "duration": 1.0
    },
    {
      "text": "One slide back.",
      "start": 281.88,
      "duration": 1.0
    },
    {
      "text": "This is our starting string.",
      "start": 282.88,
      "duration": 1.01
    },
    {
      "text": "Now, I'm going to make one conversion of the\nfirst non terminal symbol into a terminal",
      "start": 283.89,
      "duration": 7.12
    },
    {
      "text": "symbol.",
      "start": 291.01,
      "duration": 1.0
    },
    {
      "text": "However, this conversion does not make the\nentire string a terminal string.",
      "start": 292.01,
      "duration": 5.09
    },
    {
      "text": "The string is still a non terminal because\nthere are still non terminal symbols, the",
      "start": 297.1,
      "duration": 5.05
    },
    {
      "text": "words \"Am\" and\" Snake\" in there.",
      "start": 302.15,
      "duration": 4.32
    },
    {
      "text": "With that being said, I'm going to make the\nnext conversion of \"am\" into 'S.\" The string",
      "start": 306.47,
      "duration": 6.16
    },
    {
      "text": "is nonterminal.",
      "start": 312.63,
      "duration": 2.05
    },
    {
      "text": "But the string backs a terminal when I turn\n\"Snake\" into this 'SS.\"",
      "start": 314.68,
      "duration": 8.76
    },
    {
      "text": "We produced a string of entirely parsed terminals,\na non terminal string.",
      "start": 323.44,
      "duration": 10.17
    },
    {
      "text": "You could call this a grammatically correct\nphrase in Parseltongue.",
      "start": 333.61,
      "duration": 4.8
    },
    {
      "text": "Cool.",
      "start": 338.41,
      "duration": 1.25
    },
    {
      "text": "Now that we've introduced linguistic terms,\nreintroducing you to the Chomsky hierarchy.",
      "start": 339.66,
      "duration": 5.62
    },
    {
      "text": "It looks like this.",
      "start": 345.28,
      "duration": 4.44
    },
    {
      "text": "In the interest of time, I'm going to hone\nin on the grammar, the innermost circle.",
      "start": 349.72,
      "duration": 7.44
    },
    {
      "text": "What is so special about this regular grammar?",
      "start": 357.16,
      "duration": 4.43
    },
    {
      "text": "In the process of converting a non terminal\nstring into a terminal string, regular grammars",
      "start": 361.59,
      "duration": 6.21
    },
    {
      "text": "have no knowledge of the string's past states.",
      "start": 367.8,
      "duration": 3.37
    },
    {
      "text": "Once the regular grammar converts one non\nterminal symbol into a terminal symbol, the",
      "start": 371.17,
      "duration": 7.51
    },
    {
      "text": "grammar essentially forgets what the previous\nstate of the string was.",
      "start": 378.68,
      "duration": 7.06
    },
    {
      "text": "We care about regular grammars because they\nare regular expressions.",
      "start": 385.74,
      "duration": 5.85
    },
    {
      "text": "I mentioned a slide ago that regular grammars\nretain no information about intermediate steps",
      "start": 391.59,
      "duration": 7.16
    },
    {
      "text": "in converting an input string into an output\nstring.",
      "start": 398.75,
      "duration": 3.58
    },
    {
      "text": "So, what does that tells about the regular\nexpression?",
      "start": 402.33,
      "duration": 5.95
    },
    {
      "text": "The forgetfulness of regular grammars implies\nthat translations in one part of a string",
      "start": 408.28,
      "duration": 5.56
    },
    {
      "text": "do not impact how non terminals are translated\nin future steps.",
      "start": 413.84,
      "duration": 5.5
    },
    {
      "text": "This means that there's no coordination between\nthe different parts of the string in creating",
      "start": 419.34,
      "duration": 5.09
    },
    {
      "text": "the output string.",
      "start": 424.43,
      "duration": 2.93
    },
    {
      "text": "This gives us some insight into why programmers\nfirst brought regular expressions into code.",
      "start": 427.36,
      "duration": 6.45
    },
    {
      "text": "Because regular expressions convert input\nstring to output string piece by piece, they're",
      "start": 433.81,
      "duration": 5.7
    },
    {
      "text": "wonderful at pattern matching.",
      "start": 439.51,
      "duration": 3.08
    },
    {
      "text": "In programming, regular expressions convert\na pattern into the set of strings that match",
      "start": 442.59,
      "duration": 5.54
    },
    {
      "text": "that pattern.",
      "start": 448.13,
      "duration": 2.08
    },
    {
      "text": "So, in JavaScript, this is what the match\nmethod does.",
      "start": 450.21,
      "duration": 5.13
    },
    {
      "text": "It takes in a pattern, let's say it's called\nregX, like up here.",
      "start": 455.34,
      "duration": 4.67
    },
    {
      "text": "And this pattern is a regular expression.",
      "start": 460.01,
      "duration": 3.11
    },
    {
      "text": "And then match will find all sub strings of\na string, which I've called S. And then match",
      "start": 463.12,
      "duration": 6.84
    },
    {
      "text": "sorry, it will find all sub strings that match\nthat pattern within the string S.",
      "start": 469.96,
      "duration": 5.31
    },
    {
      "text": "So, the linguistic origin of this programming\nconcept that we know, regular expressions,",
      "start": 475.27,
      "duration": 9.19
    },
    {
      "text": "is starting to make a bit more sense now.",
      "start": 484.46,
      "duration": 3.34
    },
    {
      "text": "One question remains.",
      "start": 487.8,
      "duration": 1.97
    },
    {
      "text": "How else do regular expressions in programming\nrelate to those that we've seen?",
      "start": 489.77,
      "duration": 5.4
    },
    {
      "text": "Linguistics thus far?",
      "start": 495.17,
      "duration": 2.6
    },
    {
      "text": "Well, I'll walk you through the similarities\nbefore their paths fork.",
      "start": 497.77,
      "duration": 7.96
    },
    {
      "text": "Regular expressions of linguistics and programming\nuse the same three grammatical operations.",
      "start": 505.73,
      "duration": 6.54
    },
    {
      "text": "These operations are alternation, repetition\nand concatenation.",
      "start": 512.27,
      "duration": 5.93
    },
    {
      "text": "I'll talk you through what these three rules\nlook like using both words and then some examples.",
      "start": 518.2,
      "duration": 8.54
    },
    {
      "text": "Alternation effectively gives us this logical\nor.",
      "start": 526.74,
      "duration": 5.04
    },
    {
      "text": "And I'm going to tell you a great story, a\ntrue story, about the 1920s when a lot of",
      "start": 531.78,
      "duration": 10.05
    },
    {
      "text": "Greeks were emigrating from Greece to the\nUnited States.",
      "start": 541.83,
      "duration": 4.59
    },
    {
      "text": "My family was one of those set of Greek people.",
      "start": 546.42,
      "duration": 3.59
    },
    {
      "text": "Given that my forebears didn't speak English,\nit was up to the immigration officials to",
      "start": 550.01,
      "duration": 5.69
    },
    {
      "text": "determine how their Greek surnames would be\nspelled using the alphabet that we use in",
      "start": 555.7,
      "duration": 5.88
    },
    {
      "text": "English.",
      "start": 561.58,
      "duration": 1.85
    },
    {
      "text": "So, some of my relatives ended up with the\nsurname Kafkes spelled with e s.",
      "start": 563.43,
      "duration": 8.2
    },
    {
      "text": "And then others ended up with the last name\nKafkis spelled with i s.",
      "start": 571.63,
      "duration": 4.35
    },
    {
      "text": "Unless your family reunions turn into something\nlike these cats, which are really aggressive,",
      "start": 575.98,
      "duration": 9.26
    },
    {
      "text": "don't want that to happen, I can use it to\ncreate spellings of the last name both ways,",
      "start": 585.24,
      "duration": 9.91
    },
    {
      "text": "pleasing everyone.",
      "start": 595.15,
      "duration": 4.85
    },
    {
      "text": "Now we're going to move on to repetition.",
      "start": 600.0,
      "duration": 4.77
    },
    {
      "text": "Repetition allows us to match an expression\nzero or more times.",
      "start": 604.77,
      "duration": 5.72
    },
    {
      "text": "Let's look at some bit strings in order to\nsee repetition in action.",
      "start": 610.49,
      "duration": 4.16
    },
    {
      "text": "All right.",
      "start": 614.65,
      "duration": 1.8
    },
    {
      "text": "So, I have this pattern right here and it\nis 01 star.",
      "start": 616.45,
      "duration": 5.93
    },
    {
      "text": "What 01 star will match is 0 plus followed\nby any number of 1s.",
      "start": 622.38,
      "duration": 7.1
    },
    {
      "text": "The star is a meta character, basically a\nshort hand character and symbolizes one of",
      "start": 629.48,
      "duration": 7.299
    },
    {
      "text": "the many forms of repetition that you can\nuse in JavaScript.",
      "start": 636.779,
      "duration": 3.981
    },
    {
      "text": "All right.",
      "start": 640.76,
      "duration": 3.079
    },
    {
      "text": "On to concatenation.",
      "start": 643.839,
      "duration": 3.171
    },
    {
      "text": "Concatenation joins expressions together in\norder to create new patterns.",
      "start": 647.01,
      "duration": 4.62
    },
    {
      "text": "I think that concatenation is pretty useful\nwhen we're trying to see how matching different",
      "start": 651.63,
      "duration": 7.38
    },
    {
      "text": "conjugations and tenses of English verbs look.",
      "start": 659.01,
      "duration": 4.51
    },
    {
      "text": "So, we have this regular expression right\nhere.",
      "start": 663.52,
      "duration": 4.6
    },
    {
      "text": "It's call.",
      "start": 668.12,
      "duration": 1.0
    },
    {
      "text": "Call will match many forms of its infinitive\nto call.",
      "start": 669.12,
      "duration": 4.86
    },
    {
      "text": "So, it will match call, calls, called, calling,\nall sorts of things.",
      "start": 673.98,
      "duration": 6.03
    },
    {
      "text": "But as soon as we add another letter, or another\npattern, to that regular expression, only",
      "start": 680.01,
      "duration": 7.701
    },
    {
      "text": "calls will be matched.",
      "start": 687.711,
      "duration": 1.999
    },
    {
      "text": "So, yeah.",
      "start": 689.71,
      "duration": 2.08
    },
    {
      "text": "Now that we've talked through these examples\nof the rules that both engineers and linguists",
      "start": 691.79,
      "duration": 5.609
    },
    {
      "text": "use in terms of regular expressions, it's\ntime to does how regular expressions in code",
      "start": 697.399,
      "duration": 7.431
    },
    {
      "text": "and JavaScript in particular differ from their\nlinguistic predecessor.",
      "start": 704.83,
      "duration": 8.46
    },
    {
      "text": "Regular expressions in programming languages\nhave two major add ons.",
      "start": 713.29,
      "duration": 4.43
    },
    {
      "text": "These are back references and quantifiers.",
      "start": 717.72,
      "duration": 3.08
    },
    {
      "text": "Once again, I'll talk you through these differences\nwith some examples along the way.",
      "start": 720.8,
      "duration": 8.32
    },
    {
      "text": "Back references allow regular expressions\nto store these small patterns, or sub patterns.",
      "start": 729.12,
      "duration": 9.01
    },
    {
      "text": "Back references can be used to match all the\nlaughing messages that you send your friends.",
      "start": 738.13,
      "duration": 4.67
    },
    {
      "text": "And I'll show you how.",
      "start": 742.8,
      "duration": 1.17
    },
    {
      "text": "So, take, for example, the humble word \"Ha.\"",
      "start": 743.97,
      "duration": 6.12
    },
    {
      "text": "The pattern above denotes\" Ha\" as a sub pattern\nusing those parentheses.",
      "start": 750.09,
      "duration": 5.64
    },
    {
      "text": "And then references it using the backslash\none short hand symbol.",
      "start": 755.73,
      "duration": 5.62
    },
    {
      "text": "This meta character tells us to match for\nthe sub pattern again.",
      "start": 761.35,
      "duration": 4.96
    },
    {
      "text": "Then the star the end matches the second \"Ha\"\nrepeated zero or more times.",
      "start": 766.31,
      "duration": 7.24
    },
    {
      "text": "So, to put it more simply, this pattern that\nI've written here matches the string\" Ha\"",
      "start": 773.55,
      "duration": 7.49
    },
    {
      "text": "repeated over and over again.",
      "start": 781.04,
      "duration": 2.45
    },
    {
      "text": "One or more times.",
      "start": 783.49,
      "duration": 1.0
    },
    {
      "text": "I mean, you can test it out if you want, but\nit might just look like this right now.",
      "start": 784.49,
      "duration": 6.07
    },
    {
      "text": "A little bit of forced laughter.",
      "start": 790.56,
      "duration": 2.029
    },
    {
      "text": "But yeah.",
      "start": 792.589,
      "duration": 2.281
    },
    {
      "text": "Cool.",
      "start": 794.87,
      "duration": 1.68
    },
    {
      "text": "So, some of you might notice something a bit\nmore disturbing about back references.",
      "start": 796.55,
      "duration": 6.0
    },
    {
      "text": "And it is that they go against the purpose\nof regular grammars as it's spelled out in",
      "start": 802.55,
      "duration": 4.88
    },
    {
      "text": "linguistics.",
      "start": 807.43,
      "duration": 2.15
    },
    {
      "text": "As a reminder, the purpose of regular grammars\nis not to obtain information about previous",
      "start": 809.58,
      "duration": 5.43
    },
    {
      "text": "states or previous places in the string.",
      "start": 815.01,
      "duration": 3.74
    },
    {
      "text": "So, despite the performance hit that this\nviolation will cause, programmers enjoy having",
      "start": 818.75,
      "duration": 6.49
    },
    {
      "text": "a way to match repeated sub strings.",
      "start": 825.24,
      "duration": 5.76
    },
    {
      "text": "On to quantifiers.",
      "start": 831.0,
      "duration": 2.37
    },
    {
      "text": "Quantifiers alter the greediness of the regular\nexpression matching.",
      "start": 833.37,
      "duration": 4.44
    },
    {
      "text": "What does greediness mean here?",
      "start": 837.81,
      "duration": 2.37
    },
    {
      "text": "Well, greediness is measured by the question,\nhow much of that one thing do you want?",
      "start": 840.18,
      "duration": 10.92
    },
    {
      "text": "Let's look at the star, plus sign and question\nmark quantifiers for some examples in code.",
      "start": 851.1,
      "duration": 6.08
    },
    {
      "text": "All right.",
      "start": 857.18,
      "duration": 2.23
    },
    {
      "text": "We saw this example a bit earlier when I was\ndiscussing repetition.",
      "start": 859.41,
      "duration": 4.48
    },
    {
      "text": "If you'll remember, the pattern 01 star matches\n0 and then 0 followed by any number of 1s.",
      "start": 863.89,
      "duration": 8.92
    },
    {
      "text": "The star quantifier matches the expression\nto which it is applied, which is the 1 here",
      "start": 872.81,
      "duration": 6.08
    },
    {
      "text": "zero or more times.",
      "start": 878.89,
      "duration": 1.92
    },
    {
      "text": "So, I can contrast this with the plus sign\nquantifier.",
      "start": 880.81,
      "duration": 5.74
    },
    {
      "text": "The plus sign quantifier matches the expression\nto which it is applied one or more times.",
      "start": 886.55,
      "duration": 5.49
    },
    {
      "text": "So, this means that from the previous slide\nwe had zero as a possible match.",
      "start": 892.04,
      "duration": 6.41
    },
    {
      "text": "Whereas now we do not.",
      "start": 898.45,
      "duration": 3.829
    },
    {
      "text": "And then one more quantifier that's pretty\ncool to look at is the question mark quantifier.",
      "start": 902.279,
      "duration": 5.831
    },
    {
      "text": "The question mark quantifier matches the expression\nto which it's applied zero or one times.",
      "start": 908.11,
      "duration": 6.23
    },
    {
      "text": "Only those two cases.",
      "start": 914.34,
      "duration": 1.79
    },
    {
      "text": "This means that the pattern that I have written\nabove only matches zero and 01.",
      "start": 916.13,
      "duration": 5.579
    },
    {
      "text": "The star, plus sign and question mark quantifiers\nthey mention ready just a few of the many",
      "start": 921.709,
      "duration": 8.031
    },
    {
      "text": "quantifier us out there that JavaScript programmers\nuse.",
      "start": 929.74,
      "duration": 5.02
    },
    {
      "text": "Quantifiers are nice because they give programmers\nmore flexibility to fine tune their regular",
      "start": 934.76,
      "duration": 5.06
    },
    {
      "text": "expressions than the linguistic rules allow\nfor.",
      "start": 939.82,
      "duration": 3.829
    },
    {
      "text": "And now, the sun must set on our linguistic\njourney through the land of regular expressions.",
      "start": 943.649,
      "duration": 7.451
    },
    {
      "text": "Even though the sun in Berlin doesn't set\nuntil 9 p.m. I walked you through from Chomsky's",
      "start": 951.1,
      "duration": 9.179
    },
    {
      "text": "theory to JavaScript.",
      "start": 960.279,
      "duration": 2.06
    },
    {
      "text": "I showed you how regular expressions differ\nin linguistics and code.",
      "start": 962.339,
      "duration": 6.81
    },
    {
      "text": "All that cool information aside, I think that\nthe most important takeaway from this talk",
      "start": 969.149,
      "duration": 5.831
    },
    {
      "text": "is that regular expressions were put into\nprogramming languages such as JavaScript for",
      "start": 974.98,
      "duration": 5.13
    },
    {
      "text": "very pragmatic reasons.",
      "start": 980.11,
      "duration": 1.919
    },
    {
      "text": "They were also tweaked for practical reasons.",
      "start": 982.029,
      "duration": 4.511
    },
    {
      "text": "Learning about the linguistics behind regular\nexpressions helps us understand why the people",
      "start": 986.54,
      "duration": 5.28
    },
    {
      "text": "who brought linguistics into code made these\nvery particular design decisions.",
      "start": 991.82,
      "duration": 8.69
    },
    {
      "text": "This goes to show that interdisciplinary learning\nhelps enhance computer knowledge.",
      "start": 1000.51,
      "duration": 6.35
    },
    {
      "text": "I encourage you it look at engineering or\nJavaScript specifically from other disciplines.",
      "start": 1006.86,
      "duration": 10.289
    },
    {
      "text": "Trace them to their roots like I did today,\nand you can deepen your understanding of those",
      "start": 1017.149,
      "duration": 5.141
    },
    {
      "text": "concepts.",
      "start": 1022.29,
      "duration": 1.0
    },
    {
      "text": "Thank you, everyone.",
      "start": 1023.29,
      "duration": 2.149
    },
    {
      "text": "Once again, I'm Alaina.",
      "start": 1025.439,
      "duration": 2.34
    },
    {
      "text": "I work at a cool company called Medium and\nI love how linguistics and programming intersect.",
      "start": 1027.779,
      "duration": 7.191
    },
    {
      "text": "Feel free to come talk to me after this.",
      "start": 1034.97,
      "duration": 1.51
    },
    {
      "text": "[ Applause ]",
      "start": 1036.48,
      "duration": 0.5
    }
  ]
}